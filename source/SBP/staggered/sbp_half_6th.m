function [xp,xm,Pp,Pm,Qp,Qm] = sbp_half_6th(n,h,test)
% [xp,xm,Pp,Pm,Qp,Qm] = sbp_half_6th(n,h,x)
% n : number of grid points  (n+1) nodal grid (n+2) cell-centered grid
% h : grid spacing

if nargin < 3
  test = false;
end

% Unknown coefficients
x = [-0.006057144387404;
      0.014919385897843;
     -0.752524471951237;
      0.000001295414739;
     -1.161265211869713;
      1.002816691061338];
% opt =
%
%   0.226302490180738   0.012539415949299   0.000573387604124
%x = [
%  -0.009000781090236;
%  -0.025233870003085;
%  -0.670524560583062;
%  -0.000002940568368;
%  -1.140295365616798;
%   1.000680826423344;
%   ];
%x= [
%  -0.008672966627310;
%  -0.028720533159983;
%  -0.419547548783044;
%  -0.000003565551752;
%  -1.082526492871656;
%   1.028060834182644;
%   ];
%
%x =[
%  -0.009074570320540;
%  -0.029082066762029;
%  -0.434923209975563;
%  -0.000003652379198;
%  -1.131654456078884;
%   0.996601812402335;
%   ];
pm6  = x(6);
pm6 =  (min([1.0441, max([0.966722408026756 x(6)])]));    
qm05 = x(1);
qm62 = x(4);
qm65 = x(5);
qm52 = x(2);
qm54 = x(3);


% Coefficients determined such that the SBP property is satisfied
qm44 = -404765*pm6/7656 - 5*qm05/4 - 4*qm54 - 5*qm62/3 + 100*qm65/3 + 983548193/11024640;
qp44 = 404765*pm6/7656 + 5*qm05/4 + 4*qm54 + 5*qm62/3 - 100*qm65/3 - 983548193/11024640;
qm31 = 1167073*pm6/15312 - 21*qm05/16 - 9*qm52/2 + 3*qm54 - 40*qm62/3 - 100*qm65/3 - 79822780997/705576960;
pm4 = 3550*pm6/319 - 4049149/408320;
qp54 = -147497*pm6/7656 - 5*qm05/16 + qm52/5 - 6*qm54/5 + 10*qm65 + 157845905851/5291827200;
qm60 = -29*pm6/16 + qm62/6 + 2*qm65/3 + 83/32;
qm43 = 3415*pm6/66 + 15*qm05/8 + 2*qm52 + 4*qm54 + 20*qm62/3 - 100*qm65/3 - 1605841219/18247680;
qm11 = 565987*pm6/30624 - 35*qm05/16 - 3*qm52/4 + qm54/2 - 8*qm62/3 - 20*qm65/3 - 36615668311/1411153920;
pp0 = 256*pm6/319 - 180029/344520;
qp00 = -1/2;
qm53 = 26085*pm6/5104 - qm52/2 - qm54 - 2616226357/423346176;
qm04 = 128*pm6/87 - 4*qm05 - 273989/187920;
qm23 = 167515*pm6/2552 + 105*qm05/8 + 2*qm52 + 4*qm54 + 10*qm62 - 50*qm65 - 63289830199/529182720;
qm12 = -1480*pm6/87 + 35*qm05/4 + qm52 + 4*qm62 + 53354167/3006720;
qp10 = 3328*pm6/957 - qm05 - 4407497/1033560;
qp55 = 36963*pm6/10208 - qm52/20 + 3*qm54/10 - 10379588419/2351923200;
qp53 = 167721*pm6/5104 + 21*qm05/16 - 3*qm52/10 + 9*qm54/5 - 20*qm65 - 64345739017/1175961600;
qm01 = -3328*pm6/957 + qm05 + 4407497/1033560;
qp52 = -5385*pm6/232 - 35*qm05/16 + qm52/5 - 6*qm54/5 + 15*qm65 + 2128144969/53452800;
qp24 = -2600*pm6/957 + 5*qm05/4 + 4*qm52 + 10*qm62 + 93005447/33073920;
qp32 = -167515*pm6/2552 - 105*qm05/8 - 2*qm52 - 4*qm54 - 10*qm62 + 50*qm65 + 63289830199/529182720;
qp25 = -qm52;
pm0 = 256*pm6/319 - 180029/344520;
pp2 = 2560*pm6/319 - 5345191/689040;
pp4 = 1280*pm6/319 - 2260607/689040;
pm2 = 2435*pm6/319 - 22412429/3674880;
qp16 = -103*pm6/24 + 2*qm62/3 + 5*qm65/3 + 1199/192;
qp41 = -65881*pm6/3828 - 35*qm05/4 - qm54 - 2*qm62/3 + 40*qm65/3 + 117410593/3674880;
qp51 = 183593*pm6/30624 + 35*qm05/16 - qm52/20 + 3*qm54/10 - 4*qm65 - 221210574811/21167308800;
qm42 = 2600*pm6/957 - 5*qm05/4 - 4*qm52 - 10*qm62 - 93005447/33073920;
pp1 = -1280*pm6/319 + 7693669/1378080;
qp20 = -2432*pm6/319 + 4*qm05 + 5487671/689040;
qp36 = 53*pm6/8 + 2*qm62/3 - 10*qm65/3 - 6737/640;
qm40 = 103573*pm6/7656 - 4*qm52/5 + 4*qm54/5 - 5*qm62/3 - 20*qm65/3 - 13592750723/661478400;
qp21 = 1480*pm6/87 - 35*qm05/4 - qm52 - 4*qm62 - 53354167/3006720;
qp05 = -111*pm6/116 - qm52/5 + qm54/5 + 284521447/240537600;
qm33 = -258989*pm6/2552 - 63*qm05/8 - 3*qm52 - 6*qm54 - 40*qm62/3 + 200*qm65/3 + 61543380791/352788480;
qp15 = 24975*pm6/10208 + 3*qm52/4 - qm54/2 - 1415817059/470384640;
qp42 = 1141015*pm6/15312 + 35*qm05/4 + 4*qm54 + 5*qm62/2 - 50*qm65 - 4282979011/33073920;
qp43 = -400253*pm6/3828 - 21*qm05/4 - 6*qm54 - 10*qm62/3 + 200*qm65/3 + 390959363/2204928;
qp13 = -1167073*pm6/15312 + 21*qm05/16 + 9*qm52/2 - 3*qm54 + 40*qm62/3 + 100*qm65/3 + 79822780997/705576960;
qp23 = 552*pm6/29 - 21*qm05/4 - 6*qm52 - 20*qm62 - 6407713/334080;
qm50 = 111*pm6/116 + qm52/5 - qm54/5 - 284521447/240537600;
pp3 = -2560*pm6/319 + 1658089/172260;
qm63 = -53*pm6/8 - 2*qm62/3 + 10*qm65/3 + 6737/640;
qp31 = 12203*pm6/1392 + 105*qm05/8 + qm52/2 + qm54 + 8*qm62/3 - 40*qm65/3 - 4454518213/192430080;
qp26 = -qm62;
qp30 = 1792*pm6/319 - 6*qm05 - 1949243/344520;
qp06 = 29*pm6/16 - qm62/6 - 2*qm65/3 - 83/32;
qm34 = 400253*pm6/3828 + 21*qm05/4 + 6*qm54 + 10*qm62/3 - 200*qm65/3 - 390959363/2204928;
qm35 = -167721*pm6/5104 - 21*qm05/16 + 3*qm52/10 - 9*qm54/5 + 20*qm65 + 64345739017/1175961600;
qm25 = 5385*pm6/232 + 35*qm05/16 - qm52/5 + 6*qm54/5 - 15*qm65 - 2128144969/53452800;
qm14 = 65881*pm6/3828 + 35*qm05/4 + qm54 + 2*qm62/3 - 40*qm65/3 - 117410593/3674880;
qp56 = -qm65;
qm24 = -1141015*pm6/15312 - 35*qm05/4 - 4*qm54 - 5*qm62/2 + 50*qm65 + 4282979011/33073920;
qp11 = -565987*pm6/30624 + 35*qm05/16 + 3*qm52/4 - qm54/2 + 8*qm62/3 + 20*qm65/3 + 36615668311/1411153920;
qm13 = -12203*pm6/1392 - 105*qm05/8 - qm52/2 - qm54 - 8*qm62/3 + 40*qm65/3 + 4454518213/192430080;
qp46 = -199*pm6/48 - qm62/6 + 10*qm65/3 + 3067/384;
qp33 = 258989*pm6/2552 + 63*qm05/8 + 3*qm52 + 6*qm54 + 40*qm62/3 - 200*qm65/3 - 61543380791/352788480;
qm64 = 199*pm6/48 + qm62/6 - 10*qm65/3 - 3067/384;
qm00 = -1/2;
qm61 = 103*pm6/24 - 2*qm62/3 - 5*qm65/3 - 1199/192;
qp12 = 224645*pm6/3828 - 35*qm05/16 - 3*qm52 + 2*qm54 - 10*qm62 - 25*qm65 - 91099369381/1058365440;
qm45 = 147497*pm6/7656 + 5*qm05/16 - qm52/5 + 6*qm54/5 - 10*qm65 - 157845905851/5291827200;
qp35 = -26085*pm6/5104 + qm52/2 + qm54 + 2616226357/423346176;
qp45 = -qm54;
qp22 = -8200*pm6/319 + 35*qm05/4 + 4*qm52 + 15*qm62 + 288281923/11024640;
qp02 = -95165*pm6/5104 + 4*qm52/5 - 4*qm54/5 + 5*qm62/2 + 10*qm65 + 19851688963/661478400;
qm30 = -34961*pm6/1276 + 6*qm52/5 - 6*qm54/5 + 10*qm62/3 + 40*qm65/3 + 18564051443/440985600;
pm5 = -1665*pm6/319 + 272469511/44098560;
pp5 = -256*pm6/319 + 2552771/1378080;
qm51 = -24975*pm6/10208 - 3*qm52/4 + qm54/2 + 1415817059/470384640;
qp03 = 34961*pm6/1276 - 6*qm52/5 + 6*qm54/5 - 10*qm62/3 - 40*qm65/3 - 18564051443/440985600;
qm21 = -224645*pm6/3828 + 35*qm05/16 + 3*qm52 - 2*qm54 + 10*qm62 + 25*qm65 + 91099369381/1058365440;
qp40 = -128*pm6/87 + 4*qm05 + 273989/187920;
qm10 = -7501*pm6/1914 + qm52/5 - qm54/5 + 2*qm62/3 + 8*qm65/3 + 17337390803/2645913600;
pm3 = -3946*pm6/319 + 31642069/2449920;
qm20 = 95165*pm6/5104 - 4*qm52/5 + 4*qm54/5 - 5*qm62/2 - 10*qm65 - 19851688963/661478400;
qm03 = -1792*pm6/319 + 6*qm05 + 1949243/344520;
qp01 = 7501*pm6/1914 - qm52/5 + qm54/5 - 2*qm62/3 - 8*qm65/3 - 17337390803/2645913600;
qp50 = -qm05;
qm02 = 2432*pm6/319 - 4*qm05 - 5487671/689040;
qm22 = 8200*pm6/319 - 35*qm05/4 - 4*qm52 - 15*qm62 - 288281923/11024640;
qm15 = -183593*pm6/30624 - 35*qm05/16 + qm52/20 - 3*qm54/10 + 4*qm65 + 221210574811/21167308800;
qp04 = -103573*pm6/7656 + 4*qm52/5 - 4*qm54/5 + 5*qm62/3 + 20*qm65/3 + 13592750723/661478400;
qm32 = -552*pm6/29 + 21*qm05/4 + 6*qm52 + 20*qm62 + 6407713/334080;
qm41 = -263245*pm6/7656 + 5*qm05/16 + 3*qm52 - 2*qm54 + 20*qm62/3 + 50*qm65/3 + 6111884413/117596160;
qp14 = 263245*pm6/7656 - 5*qm05/16 - 3*qm52 + 2*qm54 - 20*qm62/3 - 50*qm65/3 - 6111884413/117596160;
pm1 = -949*pm6/319 + 16873951/4899840;
qm55 = -36963*pm6/10208 + qm52/20 - 3*qm54/10 + 10379588419/2351923200;
qp34 = -3415*pm6/66 - 15*qm05/8 - 2*qm52 - 4*qm54 - 20*qm62/3 + 100*qm65/3 + 1605841219/18247680;



% Number of coefficients
b = 6;

% Q+ and Q-, top-left corner
QpL = [...
qp00, qp01, qp02, qp03, qp04, qp05, qp06;
 qp10, qp11, qp12, qp13, qp14, qp15, qp16;
 qp20, qp21, qp22, qp23, qp24, qp25, qp26;
 qp30, qp31, qp32, qp33, qp34, qp35, qp36;
 qp40, qp41, qp42, qp43, qp44, qp45, qp46;
 qp50, qp51, qp52, qp53, qp54, qp55, qp56
];
QmL = [...
qm00, qm01, qm02, qm03, qm04, qm05;
 qm10, qm11, qm12, qm13, qm14, qm15;
 qm20, qm21, qm22, qm23, qm24, qm25;
 qm30, qm31, qm32, qm33, qm34, qm35;
 qm40, qm41, qm42, qm43, qm44, qm45;
 qm50, qm51, qm52, qm53, qm54, qm55;
 qm60, qm61, qm62, qm63, qm64, qm65
];

% Q+ and Q-
w = b; 
s = rot90(vander(1:w))\((0:(w-1)).*(w/2-1/2+1).^([0 0:w-2]))';  
Qp = spdiags(repmat(-s(end:-1:1)',[n+2 1]), -(w/2-1):w/2, n+2, n+2); 
Qm = spdiags(repmat(s(:)',[n+2 1]), -(w/2-1)-1:w/2-1, n+2, n+2);
Qp(end,:) = [];
Qm(:,end) = [];

% Add SBP boundary closures
Qp(1:b,1:b+1) = QpL;
Qp(end-b+1:end,end-b:end) = -fliplr(flipud(QpL));
Qm(1:b+1,1:b) = QmL;
Qm(end-b:end,end-b+1:end) = -fliplr(flipud(QmL));

% P+ and P-
Pp = ones(n+1,1);
Pm = ones(n+2,1);

Pp(1:b) = [pp0,  pp1,  pp2,  pp3,  pp4,  pp5]; 
Pp(end-b+1:end) = Pp(b:-1:1);
Pm(1:b+1) = [pm0,  pm1,  pm2,  pm3,  pm4,  pm5,  pm6];
Pm(end-b:end) = Pm(b+1:-1:1);
Pp = spdiags(Pp,0,n+1,n+1);
Pm = spdiags(Pm,0,n+2,n+2);

Pp = h*Pp;
Pm = h*Pm;

% nodal and cell-centered grids
xp = h*[0:n]';
xm = h*[0 1/2+0:n n]';  


% Test operators
if test
for j=0:b/2
  disp([ 'Dp, j = ' num2str(j) ' Error max = ' ...
  num2str(max(abs(Qp*xm.^j-j*Pp*xp.^max([j-1,0]))))]);
  disp([ 'Dm, j = ' num2str(j) ' Error max = '...
  num2str(max(abs(Qm*xp.^j-j*Pm*xm.^max([j-1,0]))))]);
end  
end

